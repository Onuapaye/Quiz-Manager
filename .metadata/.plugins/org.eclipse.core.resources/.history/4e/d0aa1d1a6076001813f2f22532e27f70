package fr.fortress.quizmanager.daos;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.inject.Named;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Repository;

import fr.fortress.quizmanager.model.Answer;
import fr.fortress.quizmanager.model.Exam;
import fr.fortress.quizmanager.services.WhereClauseBuilder;

@Repository
public class AnswerDAO extends GenericORM_DAO_Abstract<Answer> {

	@Inject
	@Named("answerQuery")
	String queryAnswer;

	private static final Logger LOGGER = LogManager.getLogger(AnswerDAO.class);

	public void createAnswer(Answer answer) {

		this.createRecord(answer);
	}

	public void updateAnswer(Answer answer) {

		this.updateRecord(answer);
	}

	public void deleteAnswer(Answer answer) {

		this.deleteRecord(answer);
	}

	/**
	 * Search for the list of all application user record as list of the application
	 * user class that is passed as the parameter
	 * 
	 * @param applicationUser
	 * @return returns a list of application users.
	 */
	public List<Answer> getByAnswerNamePassword(Answer answer) {

		List<Answer> userList = null;

		try {

			userList = this.searchRecord(answer);

		} catch (Exception e) {
			// handle exception
			LOGGER.error(
					"Error searching for application users recordr with error message: " + e.getMessage().toString());
		}

		return userList;
	}

	public List<Answer> getListOfAllAnswers(Answer answer){
		
		List<Answer> answerList = this.getListOfRecord(answer);
		return answerList;
	}
	
	@SuppressWarnings("rawtypes")
	@Override
	protected WhereClauseBuilder getWhereClauseBuilder(Answer entity) {

		final WhereClauseBuilder<Answer> wcb = new WhereClauseBuilder<>();
		wcb.setQueryString(queryAnswer);

		try {

			// let the whereclausebuilder generate this map thanks to introspection
			final Map<String, Object> parameters = new LinkedHashMap<>();

			parameters.put("answerTitle", entity.getAnswerTitleName());
			parameters.put("answerId", entity.getAnswerId());
			parameters.put("classId", entity.getClass());
			
			wcb.setParameters(parameters);

		} catch (Exception e) {
			// handle exception
			LOGGER.error(
					"Error searching for application user record with error message: " + e.getMessage().toString());
		}

		return wcb;
	}
}
