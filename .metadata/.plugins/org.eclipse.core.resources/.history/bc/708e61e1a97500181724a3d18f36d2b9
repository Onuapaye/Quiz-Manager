/**
 * 
 */
package fr.fortress.quizmanager.daos;

import java.util.List;
import java.util.Map.Entry;

import javax.inject.Inject;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.springframework.stereotype.Repository;

import fr.fortress.quizmanager.services.WhereClauseBuilder;

/**
 * @author Mr Kasapa
 *
 */
@Repository
public abstract class GenericORM_DAO_Abstract<T> {

	//Inject the session factory to help call the session methods
		@Inject
		SessionFactory sf;
		
		/**
		 * A generic method to create or insert a record by passing the appropriate object
		 * as a parameter
		 * @param entity
		 */
		public final void createRecord(T entity) {
			if (!beforeCreate(entity)) {
				return;
			}
			final Session session = sf.openSession();
			Transaction tr = session.beginTransaction();
			session.saveOrUpdate(entity);
			tr.commit();
		}

		/**
		 * A generic method to update a record by passing the appropriate object
		 * as a parameter
		 * @param entity
		 */
		public final void updateRecord(T entity) {
			final Session session = sf.openSession();
			session.saveOrUpdate(entity);
		}

		/**
		 * A generic method to delete a record by passing the appropriate object
		 * as a parameter
		 * @param entity
		 */
		public final void deleteRecord(T entity) {
			final Session session = sf.openSession();
			session.delete(entity);
		}

		/**
		 * A method to close the session factory after it has been called or used
		 */
		public final void closeSession() {
			if(sf.isOpen()) {
				sf.close();
			}
		}
		
		/**
		 * A generic method to query or search for records. It accepts as a parameter, the
		 * object or entity passed to it
		 * @param entity
		 * @return a list of records
		 */
		public List<T> searchRecord(T entity) {
			
			final Session session = sf.openSession();
			
			final WhereClauseBuilder<T> wcb = getWhereClauseBuilder(entity);
			
			final Query searchQuery = session.createQuery(wcb.getQueryString());
			
			for (final Entry<String, Object> parameterEntry : wcb.getParameters().entrySet()) {
				searchQuery.setParameter(parameterEntry.getKey(), parameterEntry.getValue());
			}

			return searchQuery.list();
		}

		protected abstract WhereClauseBuilder getWhereClauseBuilder(T entity);

		public boolean beforeCreate(T entity) {
			return entity != null;
		}
		
		
}
