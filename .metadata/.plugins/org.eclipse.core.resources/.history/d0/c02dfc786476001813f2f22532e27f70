package fr.fortress.quizmanager.services;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Component;

import fr.fortress.quizmanager.daos.MCQAnswerDAO;
import fr.fortress.quizmanager.model.MCQAnswer;


@Component
public class MCQAnswerService {

	@Inject
	MCQAnswerDAO mcq_answerDAO;

	public boolean isUserAuthenticated(String mcq_answerTitleName, int mcq_answerId) {

		MCQAnswer mcq_answer = new MCQAnswer();
		mcq_answer.setExamTitleName(mcq_answerTitleName);
		mcq_answer.setExamId(mcq_answerId);

		List<MCQAnswer> mcq_answerList = mcq_answerDAO.searchRecord(mcq_answer);

		int count = mcq_answerList.size();
		boolean result = false;

		for (int i = 0; i < count; i++) {

			if (mcq_answer.getExamTitleName().equals(mcq_answerList.get(i).getExamTitleName())
					&& mcq_answer.getExamId() == mcq_answerList.get(i).getExamId()) {
				result = true;
			} else {
				result = false;
			}
		}
		return result;

	}

	public boolean createExam(MCQAnswer mcq_answer) {

		if (mcq_answer.getExamTitleName().equals(null) || mcq_answer.getExamTitleName().equals("")) {

			return false;
		} else {
			mcq_answerDAO.createMCQAnswer(mcq_answer);
			return true;
		}

	}

	public boolean updateExam(MCQAnswer mcq_answer) {

		if (mcq_answer.getExamTitleName().equals("")) {

			return false;
		} else {
			mcq_answerDAO.updateMCQAnswer(mcq_answer);
			return true;
		}

	}

	public List<MCQAnswer> getAllExams(MCQAnswer mcq_answer) {

		List<MCQAnswer> mcq_answerList = mcq_answerDAO.getListOfAllExams(mcq_answer);
		return mcq_answerList;
	}
}
